#+title: Config
* Table Of Contents :TOC_2:
- [[#emacs-general][Emacs General]]
  - [[#sorting][Sorting]]
- [[#custom-functions][Custom functions]]
  - [[#comment_sign][=comment_sign=]]
- [[#user-info][User info]]
- [[#aesthetics][Aesthetics]]
  - [[#doom-theme][Doom theme]]
  - [[#line-numbers][Line numbers]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
- [[#org-mode][Org mode]]
  - [[#general][general]]
  - [[#babel][Babel]]
  - [[#aesthetics-1][Aesthetics]]
  - [[#text][Text]]
  - [[#export][Export]]
  - [[#noter][Noter]]
  - [[#org-capture][Org Capture]]
  - [[#refile][Refile]]
  - [[#org-agenda][Org agenda]]
  - [[#keywords][keywords]]
- [[#completion---company][Completion - Company]]
  - [[#org-backend][Org backend]]
  - [[#programming-mode-backend][Programming mode backend]]
- [[#roam][Roam]]
  - [[#capture-templates][Capture Templates]]
  - [[#display-templates][Display Templates]]
- [[#dired][Dired]]
- [[#ide][IDE]]
  - [[#arduino][Arduino]]
  - [[#line-numbers-1][Line Numbers]]
- [[#-file-settings][âš™ File settings]]

* Emacs General
** Sorting
Configure case insensitive buffer sorting on call to =sort-lines=. This means that we get:
#+begin_src verbatim
A
a
B
b
C
c
#+end_src

Instead of:
#+begin_src verbatim
A
B
C
a
b
c
#+end_src
#+begin_src emacs-lisp :tangle yes
(setq sort-fold-case t)
#+end_src
* Custom functions
** =comment_sign=
#+begin_src emacs-lisp :tangle yes
(defun BF/sign-comment ()
    (interactive)
    (insert
        (format-time-string "BF %d/%m/%Y")))
#+end_src

#+RESULTS:
: BF/sign_comment

* User info
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Ben Frazer"
      user-mail-address "benjamin.frazer.1997@gmail.com")
#+end_src

* Aesthetics
** Doom theme
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-vibrant)
#+end_src

#+begin_src emacs-lisp :tangle yes
(doom/set-frame-opacity 90)
(setq doom-font (font-spec :family "Source Code Pro" :size 16 :weight 'semi-light)
        doom-variable-pitch-font (font-spec :family "Ubuntu" :weight 'light) ; inherits `doom-font''s :size
        doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font" :size 11)
        doom-unicode-font (font-spec :family "Ubuntu" :size 12))
#+end_src

#+RESULTS:

** Line numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type nil)
#+end_src

* Keybindings
** Evil
*** movement in src
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))
#+end_src
*** Surround chars
Stop adding extra spaces when surrounding by brackets:
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'evil-surround
    (add-to-list 'evil-surround-pairs-alist '(?\{ . ("{" . "}")))
    (add-to-list 'evil-surround-pairs-alist '(?\[ . ("[" . "]")))
    (add-to-list 'evil-surround-pairs-alist '(?\( . ("(" . ")")))
)
#+end_src

* Org mode
** general
*** Notes directory
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/notes/")
#+end_src

*** Link File path
#+begin_src emacs-lisp :tangle yes
(setq org-link-file-path-type 'relative)
#+end_src
*** Mixed pitch mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'mixed-pitch-mode)
#+end_src

*** Default Startup
#+begin_src emacs-lisp :tangle yes
(after! org
(setq! org-startup-folded t))
#+end_src
** Babel
*** ANSI Colour Mode
Define =my/babel-ansi()= function to convert output of babel blocs into full ANSI colour.
#+begin_src emacs-lisp :tangle yes
(defun my/babel-ansi ()
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
    (let ((end (org-babel-result-end))
    (ansi-color-context-region nil))
    (ansi-color-apply-on-region beg end))))))
#+end_src

Define minor mode which, when active hooks =my/babel-ansi()= into the babel after execute hook.
#+begin_src emacs-lisp :tangle yes
(define-minor-mode org-babel-ansi-colors-mode
  "Apply ANSI color codes to Org Babel results."
  :global t
  :after-hook
  (if org-babel-ansi-colors-mode
      (add-hook 'org-babel-after-execute-hook #'my/babel-ansi)
    (remove-hook 'org-babel-after-execute-hook #'my/babel-ansi)))
#+end_src

Hook ANSI colour mode into org-mode hook so it activates only in org-mode.
#+begin_src emacs-lisp :tangle yes
(after! org
(add-hook 'org-mode-hook 'org-babel-ansi-colors-mode))
#+end_src
*** Python-Jupyter
#+begin_src emacs-lisp :tangle yes
(setq org-babel-default-header-args:jupyter-python
      '((:session . "py")
        (:kernel . "python3")
        (:noweb . "yes")
        ;; (:kernel . "wineWebScrapeEnv")
        ;; (:wrap)
        ;; (:results . "replace raw")
        (:async . "yes")
        ;; (:pandoc . "t")
        ;; (:prologue . "from sympy import *\n")
        ))
#+end_src

#+RESULTS:
: ((:session . py) (:kernel . python3) (:noweb . yes) (:async . yes))

**** Test Jupyter block
#+begin_src jupyter-python :tangle no
import sys
print(sys.executable)
#+end_src

#+RESULTS:
: /usr/bin/python

**** Override python source block with Jupyter
Code found [[https://discourse.doomemacs.org/t/override-built-in-src-blocks-with-emacs-jupyter/3185][here]].

#+begin_src emacs-lisp :tangle yes
(defadvice! override-src-block-when-loading-jupyter (oldfun lang)
  "If lang is in langs-to-override, map it to jupyter-lang instead."
  :around '+org-babel-load-jupyter-h
  (let* ((langs-to-override '(python))
         (jupyter-lang (if (member lang langs-to-override)
                         (intern (concat "jupyter-" (symbol-name lang)))
                         lang))
         (ans (funcall oldfun jupyter-lang)))
    (when (member lang langs-to-override)
      (org-babel-jupyter-override-src-block (symbol-name lang)))
    ans))
#+end_src

** Aesthetics :ignore:
*** Shows collapsed headings
#+begin_src emacs-lisp :tangle yes
(setq org-ellipsis " v")
#+end_src

*** Separator lines
#+begin_src emacs-lisp :tangle yes
;; (setq org-cycle-separator-lines 2) ;; stops the ellipsis miss-displaying
#+end_src

*** Heading size:
#+begin_src emacs-lisp :tangle yes
(after! org
(custom-set-faces!
  '(org-level-1 :inherit outline-1 :height 1.4 :weight semi-bold)
  '(org-level-2 :inherit outline-2 :height 1.2 :weight semi-bold)
  '(org-level-3 :inherit outline-3 :height 1.1 :weight semi-bold)
  '(org-level-4 :inherit outline-4 :height 1.0 :weight semi-bold)
  '(org-level-5 :inherit outline-5 :height 1.0)
  '(org-code :inherit org-code :foreground "#7bc275")
  '(org-link :inherit link :foreground "maroon")
  ))
#+end_src

#+RESULTS:
| doom--customize-themes-h-9 | doom--customize-themes-h-17 |

- ~code~
- =highlight=
- +strike-thorough+
- _underline_
- /italics/

*** Link colour
#+begin_src emacs-lisp :tangle yes
(custom-set-faces
 '(org-link ((t (:inherit link :foreground "maroon")))))
#+end_src
*** List bullets
Set nice unicode symbols that org will replace the ASCI list symbols (-/+/*) with:
#+begin_src emacs-lisp :tangle yes
(after! org
(setq org-superstar-item-bullet-alist '((42 . 8226) (43 . 9655) (45 . 9658))))
#+end_src

Set the ASCI symbols for each list level:
#+begin_src emacs-lisp :tangle yes
(after! org
(setq  org-list-demote-modify-bullet '(("-" . "+") ("1." . "-") ("+" . "*"))))
#+end_src
*** org definition list face color
#+begin_src emacs-lisp :tangle yes
(after! org
(custom-set-faces!
  '(org-list-dt :weight semi-bold :foreground "#bebebe")
  ))
#+end_src

#+RESULTS:
| doom--customize-themes-h-53 |

*** Org image Width
#+begin_src emacs-lisp :tangle yes
(after! org
(setq! org-image-actual-width 300))
#+end_src

** Text
*** Text emphasis
~org-emphasis-alist~ must be set *before* org loads and is hard coded in the org module so there is no way to append to the list. Thus we need to explicitly set this variable before org load.
#+begin_src emacs-lisp :tangle yes
(setq org-emphasis-alist
      '(("!" bold)
        ("*" bold)
        ("/" italic)
        ("_" underline)
        ("=" highlight)
        ("~" org-code verbatim)
        ("+" (:strike-through t))))
#+end_src

#+RESULTS:
| ! | highlight           |          |
| * | bold                |          |
| _ | underline           |          |
| = | org-verbatim        | verbatim |
| ~ | org-code            | verbatim |
| + | (:strike-through t) |          |

=This text should be highlighted?=

** Export
*** ignore headline
#+begin_src emacs-lisp :tangle yes
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src
*** Latex
**** NO ox latex
Don't know what this does yet
#+begin_src emacs-lisp :tangle yes
;; (require 'ox-latex)
#+end_src

**** Latex packages alist
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-latex-packages-alist '("" "minted" nil))
(add-to-list 'org-latex-packages-alist '("" "tikz" t))
(add-to-list 'org-latex-packages-alist '("" "circuitikz" t))
(add-to-list 'org-latex-packages-alist '("" "gensymb" t))
(add-to-list 'org-latex-packages-alist '("" "amsfonts" t))
(add-to-list 'org-latex-packages-alist '("" "amssymb" t))
#+end_src

**** Pdf process
#+begin_src emacs-lisp :tangle yes
(setq org-latex-pdf-process
      '("pdflatex -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"
       "bibtex %b"
       "makeglossaries %b"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       ))
#+end_src

**** Latex Classes
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-latex-classes
             '("IEEEtran"
               "\\documentclass{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("bf_thesis"
               "\\documentclass[11pt]{report}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section{%s}")
               ("\\subsection{%s}" . "\\subsection{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

**** TOC
#+begin_src emacs-lisp :tangle yes
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+end_src
**** Images
#+begin_src emacs-lisp :tangle yes
(setq org-latex-image-default-width "0.8\\textwidth")
(setq org-latex-default-figure-position "H")
#+end_src
*** No Link Transclusion
I added a feature to the ox-md export backend that optionally blocks the transclusion of org mode -> md file links.
#+begin_src emacs-lisp :tangle yes
(defvar org-md-transcode-link-extentions nil)
(setq org-html-link-org-files-as-html nil)
#+end_src

** Noter
#+begin_src emacs-lisp :tangle yes
(setq org-noter-always-create-frame nil)
(setq org-noter-doc-split-fraction '(0.6 . 0.6))
#+end_src
** Org Capture
*** Templates
#+begin_src emacs-lisp :tangle yes
(setq +org-capture-todo-file "~/gtd/inbox.org")
(after! org
(setq org-capture-templates '(
    ("i" "inbox" entry
    (file +org-capture-todo-file)
    "* IN %?\n%i\n%a" :prepend t)

    ;; ("n" "Personal notes" entry
    ;;   (file+headline +org-capture-notes-file "Inbox")
    ;;   "* %u %?\n%i\n%a" :prepend t)

    ;; ("j" "Journal" entry
    ;;   (file+olp+datetree +org-capture-journal-file)
    ;;   "* %U %?\n%i\n%a" :prepend t)

    ("d" "Templates for tickler" entry
    (file "~/gtd/tickler.org")
    "* TODO %?\n%i\n%a" :prepend t)

    ("p" "Templates for projects" entry
    (file +org-capture-projects-file)
    "* PROJ %?\n%i\n%a" :prepend t)
)))
#+end_src
** Refile
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-refile-targets '(
                        (nil :maxlevel . 2)             ; refile to headings in the current buffer
                        ("~/gtd/gtd.org" :maxlevel . 2)
                        ("~/gtd/gtd_household.org" :maxlevel . 2)
                        ("~/gtd/someday.org" :maxlevel . 2)
                        ("~/gtd/calendar.org" :maxlevel . 2)
                        ("~/gtd/waitingfor.org" :maxlevel . 2)
                        ("~/gtd/people.org" :maxlevel . 2)
                        ("~/gtd/places.org" :maxlevel . 2)
                        ("~/gtd/tickler.org" :maxlevel . 2))))
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src

** Org agenda

#+begin_src emacs-lisp :tangle yes
(after! org
(setq org-agenda-files '("~/gtd/inbox.org"
                         "~/gtd/gtd.org"
                         "~/gtd/calendar.org"
                         "~/gtd/gtd_household.org"
                         "~/gtd/people.org"
                         "~/gtd/waitingfor.org"
                         "~/gtd/tickler.org")))
;; ignores scheduled todo items from todo list in aganda view
(setq org-agenda-todo-ignore-scheduled t)
(setq org-agenda-skip-function-global
      '(org-agenda-skip-entry-if 'todo '("DONE" "BLOCK" "TODO" )))
#+end_src
** TODO keywords
#+begin_src emacs-lisp :tangle yes
(after! org
(add-to-list 'org-todo-keywords
             '(sequence  "âš™"))
(add-to-list 'org-todo-keywords
             '(sequence "IN" "TODO" "PROJ" "|" "DONE"))

(add-to-list 'org-todo-keywords
             '(sequence "READ" "|" "DONE"))

;; This is so I cannot set a headline to DONE if children arenâ€™t DONE.
(setq-default org-enforce-todo-dependencies t)

(add-to-list 'org-todo-keyword-faces '("IN" :foreground "orange" :weight bold))
(add-to-list 'org-todo-keyword-faces '("SCHED" :foreground "dark cyan" :weight bold))
(add-to-list 'org-todo-keyword-faces '("READ" :foreground "blue" :weight bold))
(add-to-list 'org-todo-keyword-faces '("PROJ" :foreground "purple" :weight bold))
(add-to-list 'org-todo-keyword-faces '("MILE" :foreground "MediumVioletRed" :weight bold))
(add-to-list 'org-todo-keyword-faces '("NEXT" :foreground "green" :weight bold))
(add-to-list 'org-todo-keyword-faces '("BLOCK" :foreground "red" :weight bold))
(add-to-list 'org-todo-keyword-faces '("SENT" :foreground "green" :weight bold))
(add-to-list 'org-todo-keyword-faces '("RECIEVED" :foreground "purple" :weight bold))
(add-to-list 'org-todo-keyword-faces '("UNSENT" :foreground "green" :weight bold))
)
#+end_src

* Completion - Company
** Org backend
*** Configure Ispell
First we configure company =ispell= to use our =hunspell= word-list.
#+begin_src emacs-lisp :tangle yes
;; (require 'company-ispell)
(after! org
  (setq company-ispell-available t)
  (setq company-ispell-dictionary
        (file-truename "~/.hunspell_en_GB")))
#+end_src

*** Set Org company backends
Then set the company back ends for org. Note that =company-files= needs to appear before =company-dabbrev/ispell= because it returns a different prefix and thus cant be merged... I think, either way it works like this.
#+begin_src emacs-lisp :tangle yes
(after! org
  (set-company-backend! 'org-mode
    '(company-capf :seperate company-files company-ispell)))
#+end_src

*** Configure word-list sorting
In order for =ispell= to work on our =hunspell= word-list we need to have the list sorted alphabetically so we define function to sort word file:
#+begin_src emacs-lisp :tangle yes
(defun ben/try_sort_buffer (buffer-name)
  "Tries to sort buffer-name alphabetically. Won't throw an error."
  (condition-case nil
      (save-excursion
        (find-file buffer-name)
        (sort-lines nil (point-min) (point-max))
        (save-buffer)
        (kill-buffer (current-buffer)))
    (error (message "caught error"))))
#+end_src

#+RESULTS:
: ben/try_sort_buffer

We hook the sort function into startup only because there unfortunately isn't a =on-save-to-dictionary= hook.
#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook
          (lambda ()
            (ben/try_sort_buffer "~/.hunspell_en_GB")) )
#+end_src

#+RESULTS:
| (lambda nil (ben/try_sort_buffer ~/.hunspell_en_GB)) | doom-load-packages-incrementally-h | doom-reset-file-handler-alist-h |

[[file:../.hunspell_en_GB][Link to Wordlist]]

** TODO Programming mode backend
#+begin_src emacs-lisp :tangle no
(after! prog-mode
  (set-company-backend! 'prog-mode
    '(prog-mode company-capf company-files company-yasnippet)))
#+end_src

* Roam
** Capture Templates
#+begin_src emacs-lisp :tangle yes
(setq org-roam-capture-templates
      '(("r" "bibliography reference" plain
         (file "~/.doom.d/capture_templates/org_roam/literature.org") ; <-- template store in a separate file
         :target
         (file+head "literature/${citekey}.org" "#+title: Notes on \"\\${title}\\\"")
         :unnarrowed t)
      ("d" "default" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n
#+STARTUP: latexpreview  ")
        :unnarrowed t))
      )
#+end_src
** Display Templates
This is to stop the names getting truncated down when not in full screen.
#+begin_src emacs-lisp :tangle yes
(setq
 org-roam-node-display-template
 (format "${doom-hierarchy} %s %s"
         (propertize "${doom-type:12}" 'face 'font-lock-keyword-face)
         (propertize "${doom-tags:*}" 'face 'org-tag))
 )
#+end_src

#+RESULTS:
: ${doom-hierarchy} ${doom-type:12} ${doom-tags:*}

* Dired
#+begin_src emacs-lisp :tangle yes
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

* IDE
** Arduino
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.ino$" . cpp-mode))
#+end_src
** Line Numbers
Enable line numbers only in programming modes. This involves removing the hook which sets the doom global line number mode first and replaceing it with out own hook.
#+begin_src emacs-lisp :tangle yes
(defun benjamin/enable-line-numbers ()
  (setq display-line-numbers t))
(add-hook 'prog-mode-hook 'benjamin/enable-line-numbers)
(remove-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
* âš™ File settings
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
